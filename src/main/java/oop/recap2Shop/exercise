2-Object Orientation/11-Recap-Project-ShopService
Clarify uncertainties

Do you have any questions about the previous lessons? Clarify them together.
Coding: ProductRepo

Create a class ProductRepo that contains a list of Product objects.

    Step 1: Create a record Product with the necessary attributes.
    Step 2: Implement the ProductRepo class with a list to store products.
    Step 3: Implement methods to add, remove, and get products (single product and all products).

Coding: OrderListRepo

Create a class OrderListRepo that contains a list of Order objects.

    Step 1: Create a record Order with the necessary attributes.
    Step 2: Implement the OrderListRepo class with a list to store orders.
    Step 3: Implement methods to add, remove, and (single order and all orders).

Coding: ShopService

Create a class ShopService through which we can place new orders.

    Step 1: Implement a method to place a new order.
    Step 2: Check if the ordered products exist. If not, print a System.out.println message.

Coding: OrderRepoInterface

    Step 1: Create an OrderRepo interface with the methods from the OrderListRepo (add, remove, and getSingle, getAll).

Coding: OrderMapRepo

    Create a class OrderMapRepo through which we can place new orders.
    This class should also implement the OrderRepo interface.
    In the main method, create either the OrderMapRepo or the OrderListRepo and pass it to the constructor of ShopService (as a constructor parameter that uses the interface).

Break

Take a break to rest and internalize the tasks.
Bonus: Price, Quantity

For those with prior knowledge or additional interest in challenges.

    Add a price to the product and a total price for an order.
    Allow the user to specify and modify the quantity of products in an order.

Bonus: Tests

    Write meaningful tests for the classes ProductRepo, OrderListRepo, and ShopService.
    Use assertj matchers in your tests.

Bonus: Command-line Interface

    Use a Scanner to read from System.in. Build an interactive product management system with all the extras.

Bonus: Command-line Colors

    Style the command-line output with meaningful, helpful colors and formatting.

Bonus: EAN Database

    Search the internet for an EAN database in CSV format (or have one generated by ChatGPT). Use this CSV file as input.

Bonus: Inventory Information

    Store the quantity of each product in stock. When a product is ordered, decrease the inventory. If a product is out of stock, it cannot be ordered.

Bonus: Goods In and Out

    Enable additional workflows for goods in and out. When goods are received, increase the inventory. When goods are dispatched (e.g., due to water damage or theft), decrease the inventory.

Bonus: Inventory Log

    Keep a log of all inventory changes, with links to the orders (or goods in and out) that caused these changes.

